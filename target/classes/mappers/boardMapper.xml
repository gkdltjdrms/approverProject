<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="mapper.BoardMapper">
	


	<resultMap id="postResultMap" type="java.util.Map">
    <id property="seq" column="seq"/>
    <result property="mem_id" column="mem_id"/>
    <result property="mem_name" column="mem_name"/>
    <result property="board_subject" column="board_subject"/>
    <result property="board_content" column="board_content"/>
    <result property="reg_date" column="reg_date" jdbcType="TIMESTAMP"/>
    <result property="upt_date" column="upt_date" jdbcType="TIMESTAMP"/>
    <result property="view_cnt" column="view_cnt"/>
</resultMap>

		
		<resultMap id="fileResultMap" type="model.File">
		    <id property="fileSeq" column="file_seq"/>
		    <result property="listSeq" column="list_seq"/>
		    <result property="saveName" column="save_name"/>
		    <result property="savePath" column="save_path"/>
		    <result property="realName" column="real_name"/>
		</resultMap>
		  <!-- Result Map for the History class -->
<resultMap id="historyResultMap" type="model.History">
    <id property="seq" column="SEQ"/>
    <result property="checkDate" column="CHECK_DATE"/>
    <result property="checkName" column="CHECKNAME"/>
    <result property="delegatecheckName" column="DELEGATECHECKNAME"/>
    <result property="payOption" column="PAYOPTION"/>
    <result property="boardList" column="BOARD_LIST"/>
</resultMap>
		
		 <!-- Result Map for the Board class -->
    <resultMap id="boardResultMap" type="model.Board">
        <id property="seq" column="SEQ"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="id" column="ID"/>
        <result property="subject" column="SUBJECT"/>
        <result property="content" column="CONTENT"/>
        <result property="checkDate" column="CHECK_DATE"/>
        <result property="payOption" column="PAYOPTION"/>
        <result property="history" column="HISTORY"/>
        <result property="checkName" column="CHECKNAME"/>
         <result property="memName" column="MEM_NAME"/>
          <result column="checkBoardName" property="checkBoardName"/>
            <result column="delegateRank" property="delegateRank"/>
             <result column="delegateId" property="delegateId"/>
    </resultMap>
    
    <resultMap id="delegateResultMap" type="model.Delegate">
    <result property="delegateApproverId" column="delegateapproverid"/>
    <result property="grantStartTime" column="grantstarttime"/>
    <result property="grantEndTime" column="grantendtime"/>
    <result property="delegateApproverRank" column="delegateApproverRank"/>
    <result property="delegateId" column="delegateid"/>
</resultMap>
    
    
 <select id="boardList" resultMap="postResultMap">
    SELECT seq, mem_name, mem_id, board_subject, board_content
    FROM board_study
    <where>
        <if test="keyword != null and keyword != 'undefined'">
            AND board_subject LIKE '%' || #{keyword} || '%'
        </if>

        <choose>
            <when test="searchType == 'id'">
                <!-- ID에서의 검색 조건 추가 -->
                AND mem_id LIKE '%' || #{keyword} || '%'
            </when>
            <when test="searchType == 'title'">
                <!-- 제목에서의 검색 조건 추가 -->
                AND board_subject LIKE '%' || #{keyword} || '%'
            </when>
            <!-- 기타 검색 유형 추가 가능 -->
            <otherwise>
                <!-- 기본 동작 또는 예외 처리 등을 여기에 추가 -->
            </otherwise>
        </choose>
    </where>
    ORDER BY seq DESC
</select>



    
    
		
		<!-- getMemberById 쿼리 정의 -->
		<select id="findId" parameterType="String" resultType="int">
		    SELECT COUNT(*)  <!-- 예시로 COUNT(*)를 사용하고 있습니다. 실제로는 사용자의 존재 여부 등을 확인할 수 있는 카운트나 다른 적절한 반환 값을 사용하세요. -->
		    FROM member
		    WHERE id = #{id}
		</select>
		
		<!-- mapper/BoardMapper.xml -->
		<select id="checkPassword" parameterType="java.util.Map" resultType="int">
		    SELECT COUNT(*) FROM member
		    WHERE id = #{id} AND pwd = #{pwd}
		</select>
		
		 <select id="getUserInfo" resultType="model.User">
        SELECT id, pwd, mem_name as memName, rank, delegateapproverid, grantstarttime, grantendtime
        FROM member
        WHERE id = #{id}
    </select>
    
<select id="getDelegateInfo" resultMap="delegateResultMap">
    SELECT da.delegateapproverid, da.grantstarttime, da.grantendtime, m.rank as delegateApproverRank, m.mem_name as delegateApproverName, da.delegateid
    FROM DelegateApproval da
    JOIN member m ON da.delegateapproverid = m.id
    WHERE da.delegateid = #{id}
      AND SYSDATE BETWEEN da.grantstarttime AND da.grantendtime
</select>



<!--, m3.rank AS delegateRank, m3.id AS delegateId
	  LEFT JOIN DelegateApproval da ON b.id = da.delegateid
    LEFT JOIN member m3 ON da.delegateapproverid = m3.id
  -->
	


<select id="getBoardList" resultMap="boardResultMap" parameterType="map">
    SELECT b.*, m.mem_name AS mem_name, m2.mem_name AS checkBoardName,
     m3.rank AS delegateRank, m3.id AS delegateId, da.grantstarttime as grantstarttime,
      da.grantendtime as grantendtime, m4.mem_name as delegateName
    FROM board b
    LEFT JOIN member m ON b.id = m.id 
    LEFT JOIN member m2 ON b.checkName = m2.id 
    LEFT JOIN DelegateApproval da ON m.id = da.delegateid
    LEFT JOIN member m3 ON da.delegateapproverid = m3.id
     LEFT JOIN member m4 ON b.delegatecheckname = m4.id
    <where>
        AND (
            b.id = #{id}		
            <choose>
              <when test='delegateUserRank == "과장"'>
                    OR (b.payOption = 'wait' OR b.delegatecheckname = #{delegateapproverid}) OR b.checkname = #{id}
                      AND (SYSTIMESTAMP BETWEEN #{grantStartTime} AND #{grantEndTime})
                </when>
                <when test='delegateUserRank == "부장"'>
                    OR (b.payOption IN ('checking', 'end') OR b.delegatecheckname = #{delegateapproverid}) OR b.checkname = #{id}
                    AND (SYSTIMESTAMP BETWEEN #{grantStartTime} AND #{grantEndTime})
                </when>
            
            
                <when test='userRank == "과장"'>
                    OR (b.payOption = 'wait' OR b.checkname = #{id})
                </when>
                <when test='userRank == "부장"'>
                    OR (b.payOption IN ('checking', 'end') OR b.checkname = #{id})
                </when>
            </choose>
        )
        <!-- 나머지 검색 조건 -->
        <if test='searchType == "writer"'>
            AND m.mem_name LIKE '%' || #{searchKeyword} || '%'
        </if>
        <if test='searchType == "approver"'>
            AND (
                m2.mem_name LIKE '%' || #{searchKeyword} || '%' 
                OR (#{searchKeyword} IS NULL AND m2.mem_name IS NULL)
                OR m4.mem_name LIKE '%' || #{searchKeyword} || '%' 
            )
        </if>
        <if test='searchType == "titleContent"'>
            AND (
                b.subject LIKE '%' || #{searchKeyword} || '%' 
                OR b.content LIKE '%' || #{searchKeyword} || '%'
            )
        </if>

        <!-- 추가: startDate와 endDate가 모두 존재할 때만 날짜 검색 수행 -->
        <if test='startDate != null and startDate != "" and endDate != null and endDate != ""'>
            AND b.reg_Date BETWEEN #{startDate} AND #{endDate}
        </if>
        <!-- 추가: payOption이 null이 아닌 경우 해당 조건 추가 -->
        <if test='payOption != null and payOption != ""'>
            AND b.payOption = #{payOption}
        </if>
    </where>
    ORDER BY b.seq DESC
</select>





	<!-- 사용자의 아이디로 이름 조회하는 쿼리 -->
		<select id="getUserNameById" parameterType="String" resultType="String">
		    SELECT mem_name
		    FROM member
		    WHERE id = #{checkName}
		</select>

		<!-- seq 값 중 가장 높은 값 조회 -->
		<select id="findSeq" resultType="int">
		    SELECT MAX(seq) FROM board 
		</select>
		
			<!-- 글쓰기 -->
	<insert id="insertBoard" parameterType="java.util.Map">
    <selectKey keyProperty="seq" order="BEFORE" resultType="int">
        SELECT COALESCE(MAX(seq), 0) + 1 FROM board
    </selectKey>
    INSERT INTO board (seq, id, subject, content, reg_Date, payOption, CHECK_DATE, CHECKNAME)
    VALUES (
        #{seq},
        #{id},
        #{subject},
        #{content},
        SYSDATE,
        <choose>
            <when test='userRank == "과장"'> <!-- 과장인 경우 -->
                'checking'
            </when>
            <when test='userRank == "부장"'> <!-- 부장인 경우 -->
                'end'
            </when>
            <otherwise>
                'wait' <!-- 그 외의 경우 -->
            </otherwise>
        </choose>,
        <choose>
            <when test='userRank == "과장"'> <!-- 과장인 경우 -->
                SYSDATE
            </when>
            <when test='userRank == "부장"'> <!-- 부장인 경우 -->
                SYSDATE
            </when>
            <otherwise>
                NULL <!-- 그 외의 경우 -->
            </otherwise>
        </choose>,
        <choose>
            <when test='userRank == "과장"'> <!-- 과장인 경우 -->
                #{id}
            </when>
            <when test='userRank == "부장"'> <!-- 부장인 경우 -->
                #{id}
            </when>
            <otherwise>
                NULL <!-- 그 외의 경우 -->
            </otherwise>
        </choose>
    )
</insert>


<insert id="insertBoardD" parameterType="java.util.Map">
    <selectKey keyProperty="seq" order="BEFORE" resultType="int">
        SELECT COALESCE(MAX(seq), 0) + 1 FROM board
    </selectKey>
    INSERT INTO board (seq, id, subject, content, reg_Date, payOption, CHECK_DATE, CHECKNAME, DELEGATECHECKNAME)
    VALUES (
        #{seq},
        #{id},
        #{subject},
        #{content},
        SYSDATE,
        <choose>
            <when test='delegateApproverRank == "과장"'> <!-- 과장인 경우 -->
                'checking'
            </when>
            <when test='delegateApproverRank == "부장"'> <!-- 부장인 경우 -->
                'end'
            </when>
            <otherwise>
                'wait' <!-- 그 외의 경우 -->
            </otherwise>
        </choose>,
        <choose>
            <when test='delegateApproverRank == "과장" or delegateApproverRank == "부장"'> <!-- 과장 또는 부장인 경우 -->
                SYSDATE
            </when>
            <otherwise>
                NULL <!-- 그 외의 경우 -->
            </otherwise>
        </choose>,
        <choose>
            <when test='delegateApproverRank == "과장" or delegateApproverRank == "부장"'> <!-- 과장 또는 부장인 경우 -->
                #{id}
            </when>
            <otherwise>
                NULL <!-- 그 외의 경우 -->
            </otherwise>
        </choose>,
        <choose>
            <when test='delegateApproverRank == "과장" or delegateApproverRank == "부장"'> <!-- 과장 또는 부장인 경우 -->
                #{delegateApproverId}
            </when>
            <otherwise>
                NULL <!-- 그 외의 경우 -->
            </otherwise>
        </choose>
    )
</insert>


				
			<!-- 임시저장  -->
		<insert id="saveBoard" parameterType="model.Board">
		    <selectKey keyProperty="seq" order="BEFORE" resultType="int">
		        SELECT COALESCE(MAX(seq), 0) + 1 FROM board
		    </selectKey>
		    INSERT INTO board (seq, id, subject, content, reg_Date, payOption)
		    VALUES (#{seq}, #{id}, #{subject}, #{content}, SYSDATE, 'save')
		</insert>
		
		<insert id="insertHistory" parameterType="java.util.Map">
		    INSERT INTO history (seq, check_date, checkname, payoption, board_list, historyNum)
		    VALUES (SEQ.NEXTVAL, SYSDATE, #{id}, 'wait', 
		            (SELECT COALESCE(MAX(seq), 0) FROM board WHERE seq = #{postSeq}), 
		            (SELECT COALESCE(MAX(historyNum), 0) + 1 FROM history WHERE board_list = #{postSeq}))
		</insert>
		
<insert id="insertHistoryD" parameterType="java.util.Map">
    INSERT INTO history (seq, check_date, checkname, payoption, board_list, historyNum, DELEGATECHECKNAME)
    VALUES (
        SEQ.NEXTVAL,
        SYSDATE,
        #{id},
        <choose>
            <when test="delegateApproverRank == '과장'">
                'checking'
            </when>
            <when test="delegateApproverRank == '부장'">
                'end'
            </when>
            <otherwise>
                'wait'
            </otherwise>
        </choose>,
        (SELECT COALESCE(MAX(seq), 0) FROM board WHERE seq = #{postSeq}),
        (SELECT COALESCE(MAX(historyNum), 0) + 1 FROM history WHERE board_list = #{postSeq}),
        #{delegateApproverId}
    )
</insert>


		
		<insert id="submitSaveHistory" parameterType="java.util.Map">
		    INSERT INTO history (seq, check_date, checkname, payoption, board_list, historyNum)
		    VALUES (SEQ.NEXTVAL, SYSDATE, #{id}, 'save', 
		            (SELECT COALESCE(MAX(seq), 0) FROM board WHERE seq = #{postSeq}), 
		            (SELECT COALESCE(MAX(historyNum), 0) + 1 FROM history WHERE board_list = #{postSeq}))
		</insert>

		
	<insert id="submitCheckHistory" parameterType="java.util.Map">
		    INSERT INTO history (seq, check_date, checkname, payoption, board_list, historyNum)
		    VALUES (SEQ.NEXTVAL, SYSDATE, #{id}, 
		            <choose>
		            	<when test="payOption == 'reject'">
		                    'reject'
		                </when>
		                <when test="payOption == 'wait'">
		                    'checking'
		                </when>
		                <when test="payOption == 'checking'">
		                    'end'
		                </when>
		                <otherwise>
		                    'wait' <!-- 기본값 설정 혹은 다른 조건에 해당하지 않는 경우 -->
		                </otherwise>
		            </choose>,
		            (SELECT COALESCE(MAX(seq), 0) FROM board WHERE seq = #{postSeq}), 
		            (SELECT COALESCE(MAX(historyNum), 0) + 1 FROM history WHERE board_list = #{postSeq}))
		</insert>

		
		<!-- 게시글 번호에 해당하는 히스토리 목록 조회 -->
		<select id="getHistoryListByBoardSeq" parameterType="int" resultType="model.History">
		    SELECT h.*, m.mem_name AS checkMemName, m2.mem_name AS delegatecheckMemName
		    FROM history h
		    JOIN member m ON h.checkName = m.id
		    LEFT JOIN member m2 ON h.delegatecheckname = m2.id
		    WHERE h.board_list = #{seq}
		    ORDER BY historynum
		</select>
		
		<update id="updateBoard" parameterType="model.Board">
		    UPDATE board
		    SET
		        id = #{id},
		        subject = #{subject},
		        content = #{content},
		        reg_date = SYSDATE,
		        check_date = SYSDATE,
		        payOption = 'wait',
		        checkName = #{id}
		    WHERE
		        seq = #{seq}
		</update> 
		
	
			<update id="rejectBoardseq" parameterType="java.util.Map">
		    UPDATE board
		    SET
		        check_date = SYSDATE,
		        payOption = 'reject',
		        checkName = #{id}
		    WHERE
		        seq = #{seq}
		</update> 
		
	<update id="checkBoard" parameterType="java.util.Map">
    UPDATE board
    SET
        id = #{id},
        subject = #{subject},
        content = #{content},
        check_date = SYSDATE,
        payOption =
        <choose>
            <when test="payOption == 'wait'">
                'checking'
            </when>
            <when test="payOption == 'checking'">
                'end'
            </when>
            <otherwise>
                #{payOption}
            </otherwise>
        </choose>,
        checkName = #{loginId},
        delegateCheckname = null
    WHERE
        seq = #{seq}
</update>

	<update id="checkBoardD" parameterType="java.util.Map">
    UPDATE board
    SET
        id = #{id},
        subject = #{subject},
        content = #{content},
        check_date = SYSDATE,
        delegatecheckname = #{approverId},
        payOption =
        <choose>
            <when test="payOption == 'wait'">
                'checking'
            </when>
            <when test="payOption == 'checking'">
                'end'
            </when>
            <otherwise>
                #{payOption}
            </otherwise>
        </choose>,
        checkName = #{loginId}
    WHERE
        seq = #{seq}
</update>
		
	<update id="saveUpdateBoard" parameterType="model.Board">
    UPDATE board
    SET
        id = #{id},
        subject = #{subject},
        content = #{content},
        reg_date = SYSDATE,
        payOption = 'save',
        CHECK_DATE = NULL,
        CHECKNAME = NULL
    WHERE
        seq = #{seq}
</update>
		
		<!-- 새로운 getBoardBySeq 쿼리 -->
		<select id="getBoardBySeq" resultMap="boardResultMap" parameterType="int">
		    SELECT
		        b.seq as SEQ,
		        b.id as ID,
		        b.subject as SUBJECT,
		        b.content as CONTENT,
		        b.reg_date as REG_DATE,
		        b.check_date as CHECK_DATE,
		        b.payOption as PAYOPTION,
		        b.history as HISTORY,
		        m.mem_name as MEM_NAME
		    FROM
		        board b
		        JOIN member m ON b.id = m.id
		    WHERE
		        b.seq = #{value}
		</select>
		
<select id="getDelegatesByRank" resultType="java.lang.String" parameterType="java.util.Map">
    SELECT id
    FROM member
    WHERE 
        <if test="loggedInUserRank == '과장'">
            rank IN ('사원', '대리')
        </if>
        <if test="loggedInUserRank == '부장'">
            rank IN ('대리', '과장')
        </if>
        <if test="loggedInUserRank != '과장' and loggedInUserRank != '부장'">
            rank = '직급 없음'
        </if>
</select>




<select id="getDelegateInfoByIds" resultType="java.util.Map" parameterType="java.util.Map">
    SELECT id, mem_name, rank
    FROM member
    WHERE id IN
    <foreach collection="delegateIds" item="id" open="(" separator="," close=")">
        #{id}
    </foreach>
</select>

   <select id="getDelegateRankByIds" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT rank
        FROM member
        WHERE id = #{delegateId}
    </select>

<!-- DelegateApproval 테이블에 대한 쿼리 -->

<!-- 기존 레코드 삭제 -->
<delete id="deleteDelegate" parameterType="java.util.Map">
    DELETE FROM DELEGATEAPPROVAL WHERE delegateid = #{delegateId}
</delete>

<!-- 새로운 레코드 삽입 -->
<insert id="approveDelegate" parameterType="java.util.Map">
    <selectKey keyProperty="seq" resultType="long" order="BEFORE">
        SELECT COALESCE(MAX(seq), 0) + 1 FROM DELEGATEAPPROVAL
    </selectKey>
    
    <!-- 나머지 정보를 삽입 -->
    INSERT INTO DELEGATEAPPROVAL (seq, delegateapproverid, delegateid, grantstarttime, grantendtime)
    VALUES (#{seq}, #{loggedInUserId}, #{delegateId}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP + INTERVAL '1' HOUR)
</insert>




		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
   		<!-- 추가된 부분 -->
		<insert id="savePostAndGetSeq" parameterType="model.BoardWrite">
		    <selectKey keyProperty="seq" order="BEFORE" resultType="java.lang.Integer">
		        SELECT COALESCE(MAX(seq), 0) + 1 AS seq FROM board_study
		    </selectKey>
		    INSERT INTO board_study (seq, mem_name, mem_id, board_subject, board_content, reg_date)
		    VALUES (#{seq}, #{mem_name}, #{mem_id}, #{board_subject}, #{board_content}, #{reg_date, jdbcType=TIMESTAMP})
		</insert>
		
		<insert id="saveFile" parameterType="java.util.Map">
		    <selectKey keyProperty="file_seq" order="BEFORE" resultType="java.lang.Integer">
		        SELECT COALESCE(MAX(file_seq), 0) + 1 AS file_seq FROM file_study_table
		    </selectKey>
		    INSERT INTO file_study_table (list_seq, save_name, save_path, file_seq, real_name)
		    VALUES (#{postSeq}, #{fileName}, #{filePath}, #{file_seq}, #{createName})
		</insert>
		
			<!-- 매퍼 XML에서의 설정 -->
		<select id="getFilesByListSeq" parameterType="int" resultMap="fileResultMap">
		    SELECT * FROM file_study_table WHERE list_seq = #{seq}
		</select>


		




<select id="getPost" resultMap="postResultMap" parameterType="map">
    SELECT
        seq, mem_id, mem_name, board_subject, board_content, reg_date, upt_date, view_cnt
    FROM board_study
    <where>
        <choose>
            <!-- Title search -->
            <when test="searchOption == 'title'">
                AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </when>

            <!-- Title + Author search -->
            <when test="searchOption == 'titleAndAuthor'">
                AND LOWER(board_subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
                AND LOWER(mem_name) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>

            <!-- ID search -->
            <when test="searchOption == 'id'">
                AND LOWER(mem_id) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>

            <!-- Date range search -->
            <when test="startDate != null and endDate != null">
                and to_char(reg_date, 'yyyy-MM-dd') between #{stDate} and #{endDate}
   				OR to_char(upt_date, 'yyyy-MM-dd') between #{stDate} and #{endDate}
            </when>

            <!-- Default: All search -->
            <otherwise>
                AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </otherwise>
        </choose>
    </where>
    ORDER BY seq DESC
</select>


	<!-- get total posts count -->
	<select id="getTotalPosts" resultType="int" parameterType="map">
	 
	        SELECT COUNT(*) FROM board_study
	        WHERE 1=1
	        <include refid="searchSql"></include>
	
	</select>




<sql id="searchSql">
    <if test="searchOption != '' and searchOption != null">
        <choose>
            <!-- Title search -->
            <when test="searchOption == 'title'">
                and board_subject like '%'||#{keyword}||'%'
            </when>
            
            <!-- Title and Author search -->
        	 <when test="searchOption == 'titleAndAuthor'">
			    and (board_subject like '%'||#{keyword}||'%' or mem_name like '%'||#{keyword}||'%')
			</when>

            	
            <!-- ID search -->
            <when test="searchOption == 'id'">
                and mem_id like '%'||#{keyword}||'%'
            </when>

            <!-- Add other search conditions here if needed -->
        </choose>
    </if>
    <!-- Additional date condition outside the <choose> block -->
    <if test="startDate != '' and startDate != null">
        and to_char(reg_date, 'yyyy-MM-dd') between #{startDate} and #{endDate}
        OR to_char(upt_date, 'yyyy-MM-dd') between #{startDate} and #{endDate}
    </if>
</sql>



<select id="getPostList" parameterType="map" resultMap="postResultMap">
    select
        seq,
        mem_name,
        mem_id,
        board_subject,
        board_content,
        reg_date,
        upt_date,
        view_cnt
    from (
        select
            rownum rn,
            seq,
            mem_name,
            mem_id,
            board_subject,
            board_content,
            reg_date,
            upt_date,
            view_cnt
        from (
            select
                seq,
                mem_name,
                mem_id,
                board_subject,
                board_content,
                reg_date,
                upt_date,
                view_cnt
            from board_study
            where 1=1
            <include refid="searchSql"></include>
            order by seq desc
        )
    )
    where rn between #{startRow} and #{endRow}
</select>


	
	<insert id="savePost" parameterType="model.BoardWrite">
    INSERT INTO board_study (seq, mem_name, mem_id, board_subject, board_content, reg_date)
    VALUES ((SELECT MAX(seq) FROM board_study) + 1, #{mem_name}, #{mem_id}, #{board_subject}, #{board_content}, #{reg_date, jdbcType=TIMESTAMP})
	</insert>
	<!-- nvl 일경우 0으로 시작하게 끔 해야지 처음에 글을 작성할때 오류가 생기는것을 방지 할수 있다. -->
	
		   
    
     <!-- 새로운 getPostBySeq 쿼리 -->
    <select id="getPostBySeq" resultMap="postResultMap" parameterType="int">
        SELECT seq, mem_id, board_subject, board_content, reg_date, upt_date, view_cnt
        FROM board_study
        WHERE seq = #{value}
    </select>
    
    <!-- 새로운 updatePost 쿼리 -->
    <update id="updatePost" parameterType="model.post">
        UPDATE board_study
        SET mem_id = #{mem_id},
            board_subject = #{board_subject},
            board_content = #{board_content},
            upt_date = #{upt_date}
        WHERE seq = #{seq}
    </update> 
    
     <!-- 글 삭제 쿼리 -->
    <delete id="deletePost" parameterType="java.lang.Long">
        DELETE FROM board_study WHERE seq = #{seq}
    </delete>
    
	
	  <!-- 다수의 포스트 삭제 쿼리 -->
	  <delete id="deleteSelectedPosts" parameterType="java.util.List">
	    	  DELETE FROM board_study WHERE seq IN
	        <foreach collection="list" item="item" open="(" separator="," close=")">
	            #{item}
	        </foreach>
	    </delete>
	

</mapper>
